package sudokuproject.sudokuworldsaga.guicomponents;

import java.awt.Color;
import sudokuproject.sudokuworldsaga.domain.Sudoku;

/** 
 * SudokuPanel is a graphical representation of the sudoku board.
 *
 * @author Henri
 */
public class SudokuPanel extends javax.swing.JPanel {

    private SudokuPanelSubset[] subsets;
    /**
     * Creates new SudokuPanel
     */
    public SudokuPanel() {
        initComponents();
        subsets = new SudokuPanelSubset[]{subset1, subset2, subset3, subset4, subset5, subset6, subset7, subset8, subset9};
    }

    /**
     * updateValues() updates the SudokuPanel with values from sudoku
     * 
     * @param sudoku 
     */
    public void updateValues(Sudoku sudoku) {
        if (sudoku == null) {
            return;
        }
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                setXY(i, j, sudoku.getXY(i, j) + "");
                setXYColor(i, j, Color.WHITE);
            }
        }
    }

    /**
     * updateSolvedValues() updates the empty cells in SudokuPanel with the values from solvedSudoku
     * 
     * @param sudoku Unsolved sudoku.
     * @param solvedSudoku Fully solved sudoku.
     * 
     */
    public void updateSolvedValues(Sudoku sudoku, Sudoku solvedSudoku) {
        if (sudoku == null || solvedSudoku == null) {
            return;
        }
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (sudoku.getXY(i, j) == 0) {
                    setXY(i, j, solvedSudoku.getXY(i, j) + "");
                    setXYColor(i, j, Color.GREEN);
                }
            }
        }
    }
    
    /**
     * Changes the value of cell (x, y) to param value.
     * 
     * @param x column
     * @param y row
     * @param value new value
     */
    public void setXY(int x, int y, String value) {
        if (notInRange(x, 0, 8)) {
            return;
        }
        if (notInRange(y, 0, 8)) {
            return;
        }
        subsets[findSubsetIndex(x, y)].setValue(findCellIndex(x, y), value);
    }
    
    /**
     * Changes the color of cell (x, y) to param color.
     * 
     * @param x column
     * @param y row
     * @param color new color
     */
    public void setXYColor(int x, int y, Color color) {
        if (notInRange(x, 0, 8) || notInRange(y, 0, 8)) {
            return;
        }
        subsets[findSubsetIndex(x, y)].setColor(findCellIndex(x, y), color);
    }
    
    private int findSubsetIndex(int x, int y) {
        int rowFactor = ((y + 1) - y % 3) / 3;
        int columnFactor = ((x + 1) - x % 3) / 3;
        return columnFactor + 3 * rowFactor;
    }
    
    private int findCellIndex(int x, int y) {
        int row = y % 3;
        int col = x % 3;
        return col + 3 * row;
    }
    
    private boolean notInRange(int i, int lower, int upper) {
        if (i < lower || i > upper) {
            return true;
        }
        return false;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        subset1 = new sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset();
        subset2 = new sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset();
        subset3 = new sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset();
        subset4 = new sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset();
        subset5 = new sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset();
        subset6 = new sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset();
        subset7 = new sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset();
        subset8 = new sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset();
        subset9 = new sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.GridLayout(3, 3, 1, 1));
        add(subset1);
        subset1.getAccessibleContext().setAccessibleName("subset0");

        add(subset2);
        subset2.getAccessibleContext().setAccessibleName("subset1");

        add(subset3);
        subset3.getAccessibleContext().setAccessibleName("subset2");

        add(subset4);
        subset4.getAccessibleContext().setAccessibleName("subset3");

        add(subset5);
        subset5.getAccessibleContext().setAccessibleName("subset4");

        add(subset6);
        subset6.getAccessibleContext().setAccessibleName("subset5");

        add(subset7);
        subset7.getAccessibleContext().setAccessibleName("subset6");

        add(subset8);
        subset8.getAccessibleContext().setAccessibleName("subset7");

        add(subset9);
        subset9.getAccessibleContext().setAccessibleName("subset8");
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset subset1;
    private sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset subset2;
    private sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset subset3;
    private sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset subset4;
    private sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset subset5;
    private sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset subset6;
    private sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset subset7;
    private sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset subset8;
    private sudokuproject.sudokuworldsaga.guicomponents.SudokuPanelSubset subset9;
    // End of variables declaration//GEN-END:variables

}
